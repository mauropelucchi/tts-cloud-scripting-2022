
AWSTemplateFormatVersion: '2010-09-09'

Metadata: 
  License: Apache-2.0
Description: 'AWS CloudFormation to create MyAPP Infrastructure'

Parameters:
  DataBucketName:
    Description: "The name of the S3 bucket used for the data"
    Type: String
    MinLength: 3
    MaxLength: 63
    AllowedPattern: "^([a-z0-9]+\\-?)+[a-z0-9]+$"
    ConstraintDescription: "must be a valid s3 bucket name, without periods"
  Enable:
    Default: true
    Description: "Specifies whether copy data are enabled"
    Type: String
    AllowedValues:
      - true
      - false
    ConstraintDescription: "must be true or false"



Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - 
        Label:
          default: "Stack settings"
        Parameters:
          - DataBucketName 
          - Enable
    ParameterLabels:
      DataBucketName:
        default: "data bucket name"
      Enable:
        default: "Enable?"

Resources:

  S3BucketData:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DataBucketName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true


  MyLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

  ScriptOkTopic:
    Type: AWS::SNS::Topic

  MyEC2:
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: "ami-0a8b4cd432b1c3063"
      InstanceType: "t2.micro"
      InstanceInitiatedShutdownBehavior: "stop"
      IamInstanceProfile: "LabInstanceProfile"
      KeyName: "tts"
      UserData:
          Fn::Base64: !Join
            - ''
            - - !Sub |
                  #!/bin/bash
                  yum search deltarpm
                  yum info deltarpm
                  yum install -q -y deltarpm
                  yum -q -y update
                  yum install -q -y awslogs
                  echo "[/tmp/mylog/myapplog.out]" >> /etc/awslogs/awslogs.conf
                  echo "file = /tmp/mylog/myapplog.out" >> /etc/awslogs/awslogs.conf
                  echo "log_group_name = ${MyLogGroup}" >> /etc/awslogs/awslogs.conf
                  echo "log_stream_name = {instance_id}/myapp.log" >> /etc/awslogs/awslogs.conf
                  echo "datetime_format = %d/%b/%Y:%H:%M:%S" >> /etc/awslogs/awslogs.conf
                  systemctl enable awslogsd.service
                  systemctl start awslogsd
                  mkdir /tmp/mylog
                  echo "curl https://raw.githubusercontent.com/mauropelucchi/tts-cloud-scripting-2022/main/data/data100k.csv.zip -o /tmp/mylog/data.zip >> /tmp/mylog/myapplog.out" > myscript.sh
                  echo "unzip /tmp/mylog/data.zip >> /tmp/mylog/myapplog.out" >> myscript.sh
                  echo "cat data100k.csv | wc -l >> /tmp/mylog/myapplog.out" >> myscript.sh
                  echo "aws s3 ls s3://${S3BucketData} >> /tmp/mylog/myapplog.out" >> myscript.sh
                  echo "[ [\"${Enable}\" == \"true\"] ]; aws s3 cp /tmp/mylog/data.zip s3://${S3BucketData}/data.zip >> /tmp/mylog/myapplog.out" >> myscript.sh
                  cp myscript.sh /etc/init.d/
                  chmod +x /etc/init.d/myscript.sh
                  echo  "@reboot /etc/init.d/myscript.sh" > crontabnew
                  crontab crontabnew
                  shutdown -h now
                  

  # --- BEGIN PIPELINE INFRASTRUCTURE ---

  DataPipeline:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      DefinitionString:
        !Sub |
          {
            "Comment": "My App State machine",
            "StartAt": "LaunchScript",
            "States": {
              "LaunchScript": {
                "Type": "Task",
                "Parameters": {
                  "InstanceIds": [
                    "${MyEC2}"
                  ]
                },
                "Resource": "arn:aws:states:::aws-sdk:ec2:startInstances",
                "Next": "Wait"
              },
              "Wait": {
                "Type": "Wait",
                "Seconds": 600,
                "Next": "StopInstances"
              },
              "StopInstances": {
                "Type": "Task",
                "Next": "Send notification",
                "Parameters": {
                  "InstanceIds": [
                    "${MyEC2}"
                  ]
                },
                "Resource": "arn:aws:states:::aws-sdk:ec2:stopInstances"
              },
              "Send notification": {
                "Type": "Task",
                "Resource": "arn:aws:states:::sns:publish",
                "Parameters": {
                  "Message": {
                    "data_ready": "ok"
                  },
                  "TopicArn": "${ScriptOkTopic}"
                },
                "ResultPath": null,
                "End": true
              }
            }
          }
      RoleArn: "arn:aws:iam::288291355943:role/LabRole"
      StateMachineType: STANDARD

Outputs:
  S3BucketName:
    Value: S3Bucket 
    Description: Bucket Name
  S3BucketData:
    Value: S3Bucket 
    Description: Bucket Name